from odoo import models, fields, api
from odoo.exceptions import ValidationError
from datetime import datetime

class LichTrinh(models.Model):
    _name = 'lich_trinh'
    _description = 'üìÖ Qu·∫£n l√Ω L·ªãch Tr√¨nh'

    # Th√¥ng tin l·ªãch tr√¨nh
    schedule_id = fields.Char(
        string='üÜî M√£ L·ªãch Tr√¨nh',
        required=True,
        copy=False,
        readonly=True,
        index=True,
        default=lambda self: self._generate_schedule_id()
    )

    # Li√™n k·∫øt v·ªõi ph∆∞∆°ng ti·ªán v√† t√†i x·∫ø
    vehicle_id = fields.Many2one('phuong_tien', string='üöó Ph∆∞∆°ng Ti·ªán', required=True)
    driver_id = fields.Many2one('tai_xe', string='üë®‚Äç‚úàÔ∏è T√†i X·∫ø', required=True)

    # C√°c th√¥ng tin li√™n quan ƒë·∫øn ph∆∞∆°ng ti·ªán
    vehicle_name = fields.Char(related='vehicle_id.name', store=True, string="T√™n Ph∆∞∆°ng Ti·ªán")
    vehicle_license_plate = fields.Char(related='vehicle_id.license_plate', store=True, string="Bi·ªÉn S·ªë")
    vehicle_type = fields.Selection(related='vehicle_id.vehicle_type', store=True, string="Lo·∫°i Xe")
    vehicle_status = fields.Selection(related='vehicle_id.status', store=True, string="Tr·∫°ng Th√°i")
    vehicle_manufacturer = fields.Many2one(related='vehicle_id.manufacturer_id', store=True, string="H√£ng S·∫£n Xu·∫•t")
    vehicle_mileage = fields.Float(related='vehicle_id.mileage', store=True, string="S·ªë Km ƒê√£ ƒêi")

    # Th·ªùi gian v√† ƒë·ªãa ƒëi·ªÉm
    start_time = fields.Datetime(string='‚è∞ Th·ªùi Gian Xu·∫•t Ph√°t', required=True)
    end_time = fields.Datetime(string='üèÅ Th·ªùi Gian V·ªÅ', required=True)

    start_location = fields.Char(string='üìç ƒê·ªãa ƒêi·ªÉm Xu·∫•t Ph√°t', required=True)
    end_location = fields.Char(string='üìå ƒê√≠ch ƒê·∫øn', required=True)

    # M·ª•c ƒë√≠ch s·ª≠ d·ª•ng ph∆∞∆°ng ti·ªán (Selection)
    purpose = fields.Selection([
        ('work', 'C√¥ng vi·ªác'),
        ('transportation', 'V·∫≠n chuy·ªÉn'),
        ('other', 'Kh√°c')
    ], string='M·ª•c ƒê√≠ch S·ª≠ D·ª•ng', required=True)

    # Tr·∫°ng th√°i l·ªãch tr√¨nh
    status = fields.Selection([
        ('pending', '‚è≥ Ch∆∞a B·∫Øt ƒê·∫ßu'),
        ('in_progress', 'üöó ƒêang Th·ª±c Hi·ªán'),
        ('completed', '‚úÖ ƒê√£ Ho√†n Th√†nh')
    ], string='üìä Tr·∫°ng Th√°i', default='pending')

    # Ghi ch√∫
    notes = fields.Text(string='üìù Ghi Ch√∫ H√†nh Tr√¨nh')

    # T·ª± ƒë·ªông ƒëi·ªÅn th·ªùi gian t·∫°o v√† c·∫≠p nh·∫≠t
    created_at = fields.Datetime(
        string='Ng√†y t·∫°o l·ªãch tr√¨nh',
        default=fields.Datetime.now,
        readonly=True
    )
    updated_at = fields.Datetime(
        string='Ng√†y c·∫≠p nh·∫≠t l·ªãch tr√¨nh',
        default=fields.Datetime.now,
        track_visibility='onchange'
    )

    _sql_constraints = [
        ('schedule_id_uniq', 'unique(schedule_id)', 'üÜî M√£ L·ªãch Tr√¨nh kh√¥ng ƒë∆∞·ª£c tr√πng! Vui l√≤ng nh·∫≠p l·∫°i.')
    ]

    @api.constrains('start_time', 'end_time')
    def _check_schedule_dates(self):
        """ ‚úÖ Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ng√†y k·∫øt th√∫c v√† kh√¥ng tr√πng l·ªãch tr√¨nh xe """
        for record in self:
            if record.start_time >= record.end_time:
                raise ValidationError("üö´ Th·ªùi gian xu·∫•t ph√°t ph·∫£i nh·ªè h∆°n th·ªùi gian k·∫øt th√∫c!")

            # Ki·ªÉm tra xe c√≥ b·ªã tr√πng l·ªãch tr√¨nh kh√¥ng
            overlapping_schedules = self.env['lich_trinh'].search([
                ('vehicle_id', '=', record.vehicle_id.id),
                ('id', '!=', record.id),  # Lo·∫°i tr·ª´ ch√≠nh b·∫£n ghi hi·ªán t·∫°i
                ('start_time', '<', record.end_time),
                ('end_time', '>', record.start_time)
            ])
            if overlapping_schedules:
                raise ValidationError("üöó Ph∆∞∆°ng ti·ªán n√†y ƒë√£ c√≥ l·ªãch tr√¨nh kh√°c trong kho·∫£ng th·ªùi gian n√†y!")

    @api.model
    def _generate_schedule_id(self):
        """ ‚úÖ T·∫°o m√£ l·ªãch tr√¨nh t·ª± ƒë·ªông (LT001, LT002, ...) """
        last_record = self.search([], order="schedule_id desc", limit=1)
        if last_record and last_record.schedule_id:
            last_number = int(last_record.schedule_id[2:])  # B·ªè "LT" l·∫•y s·ªë
            new_id = f"LT{last_number + 1:03d}"  # ƒê·ªãnh d·∫°ng ID m·ªõi
        else:
            new_id = "LT001"  # N·∫øu ch∆∞a c√≥ b·∫£n ghi n√†o th√¨ b·∫Øt ƒë·∫ßu t·ª´ 001
        return new_id


    @api.model
    def create(self, vals):
        # T·∫°o l·ªãch tr√¨nh m·ªõi
        new_schedule = super(LichTrinh, self).create(vals)

        # Ghi l·∫°i thao t√°c v√†o l·ªãch s·ª≠
        self.env['lich_su_thao_tac'].create({
            'model_name': 'lich_trinh',
            'record_id': new_schedule.id,
            'action_type': 'create',
            'action_details': f"Th√™m l·ªãch tr√¨nh m·ªõi: {new_schedule.schedule_id}",
            'user_id': self.env.user.id,
            'action_date': fields.Datetime.now(),
        })

        return new_schedule

    # Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t l·ªãch tr√¨nh
    def write(self, vals):
        # C·∫≠p nh·∫≠t l·ªãch tr√¨nh
        result = super(LichTrinh, self).write(vals)

        # Ghi l·∫°i thao t√°c s·ª≠a l·ªãch tr√¨nh v√†o l·ªãch s·ª≠
        for record in self:

            if 'updated_at' not in vals:
              # C·∫≠p nh·∫≠t tr∆∞·ªùng 'updated_at' m√† kh√¥ng g·ªçi l·∫°i 'write'
                record.updated_at = fields.Datetime.now()


            self.env['lich_su_thao_tac'].create({
                'model_name': 'lich_trinh',
                'record_id': record.id,
                'action_type': 'update',
                'action_details': f"C·∫≠p nh·∫≠t l·ªãch tr√¨nh: {record.schedule_id}",
                'user_id': self.env.user.id,
                'action_date': fields.Datetime.now(),
            })

        return result

    # Ph∆∞∆°ng th·ª©c x√≥a l·ªãch tr√¨nh
    def unlink(self):
        # Ghi l·∫°i thao t√°c v√†o l·ªãch s·ª≠ khi x√≥a l·ªãch tr√¨nh
        for record in self:
            self.env['lich_su_thao_tac'].create({
                'model_name': 'lich_trinh',
                'record_id': record.id,
                'action_type': 'delete',
                'action_details': f"X√≥a l·ªãch tr√¨nh: {record.schedule_id}",
                'user_id': self.env.user.id,
                'action_date': fields.Datetime.now(),
            })

        return super(LichTrinh, self).unlink()