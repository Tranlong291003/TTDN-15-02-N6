from odoo import models, fields, api

class ViPham(models.Model):
    _name = 'vi_pham'
    _description = 'Qu·∫£n l√Ω Vi Ph·∫°m Giao Th√¥ng'

    violation_id = fields.Char(
        string='üÜî M√£ Vi Ph·∫°m', 
        required=True, 
        copy=False, 
        readonly=True,  
        index=True, 
        default=lambda self: self._generate_violation_id()
    )
    vehicle_name = fields.Char(related='vehicle_id.name', store=True, string="T√™n Ph∆∞∆°ng Ti·ªán")
    vehicle_license_plate = fields.Char(related='vehicle_id.license_plate', store=True, string="Bi·ªÉn S·ªë")
    vehicle_type = fields.Selection(related='vehicle_id.vehicle_type', store=True, string="Lo·∫°i Xe")
    vehicle_status = fields.Selection(related='vehicle_id.status', store=True, string="Tr·∫°ng Th√°i")
    vehicle_manufacturer = fields.Many2one(related='vehicle_id.manufacturer_id', store=True, string="H√£ng S·∫£n Xu·∫•t")
    vehicle_mileage = fields.Float(related='vehicle_id.mileage', store=True, string="S·ªë Km ƒê√£ ƒêi")
    driver_id = fields.Many2one('tai_xe', string='T√†i x·∫ø', required=True)
    vehicle_id = fields.Many2one('phuong_tien', string='Ph∆∞∆°ng ti·ªán', required=True)
    violation_type = fields.Selection([
        ('speeding', 'V∆∞·ª£t t·ªëc ƒë·ªô'),
        ('wrong_lane', 'ƒêi sai l√†n'),
        ('lights_off', 'Kh√¥ng b·∫≠t ƒë√®n')
    ], string='Lo·∫°i vi ph·∫°m', required=True)
    violation_date = fields.Date(string='Ng√†y vi ph·∫°m', required=True)
    fine_amount = fields.Float(string='S·ªë ti·ªÅn ph·∫°t')
    status = fields.Selection([
        ('pending', 'Ch∆∞a ƒë√≥ng ph·∫°t'),
        ('paid', 'ƒê√£ ƒë√≥ng ph·∫°t')
    ], string='Tr·∫°ng th√°i', default='pending')

    _sql_constraints = [
        ('violation_id_uniq', 'unique(violation_id)', 'üÜî M√£ Vi Ph·∫°m kh√¥ng ƒë∆∞·ª£c tr√πng! Vui l√≤ng nh·∫≠p l·∫°i.')
    ]

    @api.model
    def _generate_violation_id(self):
        """ T·∫°o m√£ vi ph·∫°m t·ª± ƒë·ªông (VP001, VP002, ...) """
        last_record = self.search([], order="violation_id desc", limit=1)
        if last_record and last_record.violation_id:
            last_number = int(last_record.violation_id[2:])  # B·ªè "VP" l·∫•y s·ªë
            new_id = f"VP{last_number + 1:03d}"  # ƒê·ªãnh d·∫°ng ID m·ªõi
        else:
            new_id = "VP001"  # N·∫øu ch∆∞a c√≥ b·∫£n ghi n√†o th√¨ b·∫Øt ƒë·∫ßu t·ª´ 001
        return new_id

        
    @api.model
    def create(self, vals):
        """ G√°n m√£ vi ph·∫°m t·ª± ƒë·ªông n·∫øu ch∆∞a c√≥ """
        if 'violation_id' not in vals or not vals['violation_id']:
            vals['violation_id'] = self._generate_violation_id()
        
        # T·∫°o b·∫£n ghi vi ph·∫°m m·ªõi
        new_violation = super(ViPham, self).create(vals)

        # Ghi l·∫°i thao t√°c v√†o l·ªãch s·ª≠
        self.env['lich_su_thao_tac'].create({
            'model_name': 'vi_pham',
            'record_id': new_violation.id,
            'action_type': 'create',
            'action_details': f"Th√™m vi ph·∫°m m·ªõi: {new_violation.violation_id}",
            'user_id': self.env.user.id,
            'action_date': fields.Datetime.now(),
        })

        return new_violation

    def write(self, vals):
        """ Ghi l·∫°i thao t√°c s·ª≠a vi ph·∫°m v√†o l·ªãch s·ª≠ """
        result = super(ViPham, self).write(vals)

        for record in self:
            self.env['lich_su_thao_tac'].create({
                'model_name': 'vi_pham',
                'record_id': record.id,
                'action_type': 'update',
                'action_details': f"C·∫≠p nh·∫≠t vi ph·∫°m: {record.violation_id}",
                'user_id': self.env.user.id,
                'action_date': fields.Datetime.now(),
            })

        return result

    def unlink(self):
        """ Ghi l·∫°i thao t√°c x√≥a vi ph·∫°m v√†o l·ªãch s·ª≠ """
        for record in self:
            self.env['lich_su_thao_tac'].create({
                'model_name': 'vi_pham',
                'record_id': record.id,
                'action_type': 'delete',
                'action_details': f"X√≥a vi ph·∫°m: {record.violation_id}",
                'user_id': self.env.user.id,
                'action_date': fields.Datetime.now(),
            })

        return super(ViPham, self).unlink()